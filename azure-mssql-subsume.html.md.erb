---
title: Subsuming a Amazon RDS for PostgreSQL Instance
owner: Cloud Service Broker for AWS
---

<strong><%= modified_date %></strong>
      
      
This topic describes moving an Amazon RDS for PostgreSQL Instance
from the VMware Tanzu Service Broker for AWS tile
to the <%= vars.product_short %> on AWS tile.

This process of moving control of an instance from one broker tile
to another is called _subsuming_ the instance.

## <a id='about'></a> About Subsuming Amazon RDS for PostgreSQL Instance

Because the VMware Tanzu Service Broker for AWS (hereafter: "the legacy broker") tile
is going out of support, it is important to move PostgresQL instances that
were created by the legacy Broker over to the <%= vars.product_short %> for AWS.

Subsuming the instance allows you to move the PostgresQL instance from the control of one broker
to the control of another without migrating the data.

**After the subsuming process, you can manage the instance and the associated PostgresQL instance
just like any other service instance.**

For general information about the VMware Tanzu Service Broker for AWS tile,
see [VMware Tanzu Service Broker for AWS](https://docs.pivotal.io/aws-services/index.html).

## <a id='process'></a> Overview of the Process

Detailed steps for subsuming are given below.
However, the outline of the process is:

+ Create a new Cloud Service-brokered instance
+ Import information about the PostgresQL instance using the "subsume" plan in CloudFoundry Marketplace (`cf m`).
+ Unbind apps from the legacy broker's instance.
+ Bind apps to the new Cloud Service-brokered instance.
+ Purge the connections between the legacy-brokered instance and the PostgresQL instance.
+ Restage any applications which were connected to the legacy PostgresQL instance.

##<a id="prereq"></a> Prerequisite

VVVVVV
Before you can subsume a PostgresQL instance,
you must have the admin password for the database.
This password cannot be automatically discovered.
It was probably set when the server was created.

The database username _is_ automatically discovered,
so ensure you use the password that matches the database user that was specified during setup.
See [Broker Config](https://docs.pivotal.io/partners/azure-sb/installing.html#broker-config),
in _Installing and Configuring Microsoft Azure Service Broker_.
^^^^^
NEEDS CHANGE


## <a id='subsume'></a> Subsume a VMware Tanzu Service Broker for AWS PostgresQL Instance

To subsume control of an existing legacy PostgresQL instance to
the <%= vars.product_short %>:

1. Get the legacy PostgresQL instance's details by running:

    ```
    cf service LEGACY-SERVICE-INSTANCE
    ```

    Where is `LEGACY-SERVICE-INSTANCE` is the name of the PostgresQL instance which you hope to transfer control of to <%= vars.product_short %>

    An example output has been provided below:

    <pre class="terminal">$ cf service LEGACY-SERVICE-INSTANCE
name:            LEGACY-SERVICE-INSTANCE
service:          aws-rds-PostgresQL
tags:             
plan:             basic
description:      Create and manage Amazon RDS PostgreSQL deployments
documentation:    https://aws.amazon.com/rds/postgresql/
dashboard:        
service broker:   aws-services-broker

Showing status of last operation from service aws-PostgresQL-legacy...

status:    create succeeded
message:   Instance identifier(s) : [e7c0ac8a-0416-11eb-ae0e-3bbe060ffff9]
started:   2020-09-15T21:30:41Z
updated:   2020-09-15T21:34:53Z

There are no bound apps for this service.

Upgrades are not supported by this broker.
    </pre>


2. Create a new PostgresQL service instance using <%= vars.product_short %>  and
   import the existing legacy-provisioned resource by choosing the "subsume" plan and including the metadata as shown:

    ```
    cf create-service csb-aws-postgresql subsume NEW-SERVICE-INSTANCE -c '{{"aws_db_id":"AWS-RESOURCE-ID","admin_password":"ADMIN-PASSWORD"}}'
    ```

    Where:
    * `NEW-SERVICE-INSTANCE` is a name you choose for the new service instance
       that <%= vars.product_short %> creates to replace the MSAB service instance.
    

       VVVFIX
    * `ADMIN-PASSWORD` is the admin password for the database.
       See [Prerequisite](#prereq) above.
       ^^^FIX
    

    * `AWS-RESOURCE-ID` is found in the output of Step 1 above.


    For example:

    <pre class="terminal">
$ cf create-service csb-aws-postgresql subsume NEW-SERVICE-INSTANCE -c \
 '{"aws_db_id":"e7c0ac8a-0416-11eb-ae0e-3bbe060ffff9","admin_password":"PA55W0RD"}'
    </pre>


3. Disconnect the app from the legacy service binding by running:

    ```
    cf unbind-service APP-NAME LEGACY-SERVICE-INSTANCE
    ```

    Where:
    * `APP-NAME` is the app using the PostgresQL instance.
    * `LEGACY-SERVICE-INSTANCE` is the name of the service instance,
    the VMware Tanzu Service Broker for AWS-brokered PostgresQL instance.

    For example:

    <pre class="terminal">
$ cf unbind-service my-app old-instance
    </pre>

5. Bind the app to the new service instance by running:

    ```
    cf bind-service APP-NAME NEW-SERVICE-INSTANCE
    ```

    Where `NEW-SERVICE-INSTANCE` is the name of the <%= vars.product_short %> service instance
    that you created in Step 2 above.

    For example:

    <pre class="terminal">$cf bind-service my-app my-PostgresQL-instance </pre>

    Because Cloud Service Broker creates new credentials at bind time,
    this creates new binding credentials for the app.

6. Restage the app:

    ```
    cf restage APP-NAME
    ```


1. Remove record of the old VMware Tanzu Service Broker for AWS-brokered PostgresQL instance and any child objects
   from Cloud Foundry by running:

    ```
    cf purge-service-instance LEGACY-SERVICE-INSTANCE
    ```

    For example:

    <pre class="terminal">$ cf purge-service-instance masb-instance</pre>

    <p class="note warning"><strong> Warning:</strong> Do not run <code>cf delete-service</code>
    because then the VMware Tanzu Service Broker for AWS deletes the AWS PostgresQL resource, that is, the database.
</p>

## <a id="next-steps"></a> Next Steps

When all VMware Tanzu Service Broker for AWS-brokered service instances for all apps have been moved to Cloud Service-brokered instances,
you can uninstall the VMware Tanzu Service Broker for AWS-brokered tile
from <%= vars.ops_manager %>.
